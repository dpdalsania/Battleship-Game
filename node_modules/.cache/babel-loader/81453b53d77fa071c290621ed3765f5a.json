{"ast":null,"code":"import _classCallCheck from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/drashti/Documents/battleship-project/src/react/components/setUpBoard/ReadyButton.js\";\nimport React from \"react\";\nimport { connect, withAsyncAction } from \"../../HOCs\";\nimport { Redirect } from \"../index\";\nimport { fetchLastMessage, getOldMessages, startBoard } from \"../../../redux/index\";\nimport { WaitScreen } from \"../waitScreen\";\nimport { boards } from \".\";\n\nvar ReadyButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ReadyButton, _React$Component);\n\n  function ReadyButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ReadyButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ReadyButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      redirect: false,\n      opponentName: \"\",\n      playerReady: false,\n      message: \"Waiting for your opponent to finish placing ships...\"\n    };\n\n    _this.componentDidMount = function () {\n      _this.determineOpponentName();\n    };\n\n    _this.determineOpponentName = function () {\n      if (_this.props.playerName === \"playerA\") {\n        _this.setState({\n          opponentName: \"playerB\"\n        });\n      } else if (_this.props.playerName === \"playerB\") {\n        _this.setState({\n          opponentName: \"playerA\"\n        });\n      }\n    };\n\n    _this.verifyAllShipsPlaced = function () {\n      var ships = [_this.props.battleship, _this.props.carrier, _this.props.cruiser, _this.props.destroyer, _this.props.submarine];\n\n      if (ships.includes(null)) {\n        alert(\"Please place all your ships on the board!\");\n        return false;\n      } else {\n        _this.postMessagesOfBattleShipLocation();\n\n        _this.postMessagesOfCarrierLocation();\n\n        _this.postMessagesOfCruiserLocation();\n\n        _this.postMessagesOfDestroyerLocation();\n\n        _this.postMessagesOfSubmarineLocation();\n\n        return true;\n      }\n    };\n\n    _this.postMessagesOfBattleShipLocation = function () {\n      var postMessage = _this.props.postMessage;\n      var startBoard = _this.props.startBoard;\n      var battleshipCoordinates = _this.props.battleship.coordinates;\n      var gameNumber = _this.props.gameNumber;\n      var playerName = _this.props.playerName;\n      battleshipCoordinates.forEach(function (coordinate) {\n        postMessage({\n          text: \"Game \".concat(gameNumber, \" battleship \").concat(coordinate)\n        });\n        boards[playerName][coordinate].ship = \"battleship\";\n        startBoard(boards);\n      });\n    };\n\n    _this.postMessagesOfCarrierLocation = function () {\n      var postMessage = _this.props.postMessage;\n      var carrierCoordinates = _this.props.carrier.coordinates;\n      var gameNumber = _this.props.gameNumber;\n      var playerName = _this.props.playerName;\n      carrierCoordinates.forEach(function (coordinate) {\n        postMessage({\n          text: \"Game \".concat(gameNumber, \" carrier \").concat(coordinate)\n        });\n        boards[playerName][coordinate].ship = \"carrier\";\n        startBoard(boards);\n      });\n    };\n\n    _this.postMessagesOfCruiserLocation = function () {\n      var postMessage = _this.props.postMessage;\n      var cruiserCoordinates = _this.props.cruiser.coordinates;\n      var gameNumber = _this.props.gameNumber;\n      var playerName = _this.props.playerName;\n      cruiserCoordinates.forEach(function (coordinate) {\n        postMessage({\n          text: \"Game \".concat(gameNumber, \" cruiser \").concat(coordinate)\n        });\n        boards[playerName][coordinate].ship = \"cruiser\";\n        startBoard(boards);\n      });\n    };\n\n    _this.postMessagesOfDestroyerLocation = function () {\n      var postMessage = _this.props.postMessage;\n      var destroyerCoordinates = _this.props.destroyer.coordinates;\n      var gameNumber = _this.props.gameNumber;\n      var playerName = _this.props.playerName;\n      destroyerCoordinates.forEach(function (coordinate) {\n        postMessage({\n          text: \"Game \".concat(gameNumber, \" destroyer \").concat(coordinate)\n        });\n        boards[playerName][coordinate].ship = \"destroyer\";\n        startBoard(boards);\n      });\n    };\n\n    _this.postMessagesOfSubmarineLocation = function () {\n      var postMessage = _this.props.postMessage;\n      var submarineCoordinates = _this.props.submarine.coordinates;\n      var gameNumber = _this.props.gameNumber;\n      var playerName = _this.props.playerName;\n      submarineCoordinates.forEach(function (coordinate) {\n        postMessage({\n          text: \"Game \".concat(gameNumber, \" submarine \").concat(coordinate)\n        });\n        boards[playerName][coordinate].ship = \"submarine\";\n        startBoard(boards);\n      });\n    };\n\n    _this.startCheckingForOpponentReady = function () {\n      _this.interval = setInterval(function () {\n        _this.checkReadyPlay();\n      }, 2000);\n    };\n\n    _this.checkReadyPlay = function () {\n      _this.props.fetchLastMessage(_this.state.opponentName).then(function (result) {\n        result.payload.messages.map(function (message) {\n          if (!message.text.includes(\"start\")) {\n            return _this.redirectToPlayGame();\n          } else return false;\n        });\n      });\n    };\n\n    _this.redirectToPlayGame = function () {\n      _this.props.getOldMessages(_this.state.opponentName);\n\n      _this.setState({\n        redirect: true\n      });\n    };\n\n    _this.handleClick = function () {\n      if (_this.verifyAllShipsPlaced() === false) {\n        return;\n      }\n\n      _this.setState({\n        playerReady: true\n      });\n\n      _this.props.postMessage({\n        text: \"Game \".concat(_this.props.gameNumber, \" ready\")\n      });\n\n      _this.startCheckingForOpponentReady();\n    };\n\n    return _this;\n  }\n\n  _createClass(ReadyButton, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.redirect === true) {\n        return React.createElement(Redirect, {\n          to: \"/play\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, this.state.playerReady && React.createElement(WaitScreen, {\n        message: this.state.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Ready!\"));\n    }\n  }]);\n\n  return ReadyButton;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    battleship: state.setUpGame.placeBattleship.result,\n    carrier: state.setUpGame.placeCarrier.result,\n    cruiser: state.setUpGame.placeCruiser.result,\n    destroyer: state.setUpGame.placeDestroyer.result,\n    submarine: state.setUpGame.placeSubmarine.result,\n    playerName: state.auth.login.result.username,\n    gameNumber: state.welcome.startGame.result ? state.welcome.startGame.result.message.text.slice(5, 9) : undefined\n  };\n};\n\nvar mapDispatchToProps = {\n  fetchLastMessage: fetchLastMessage,\n  getOldMessages: getOldMessages,\n  startBoard: startBoard\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withAsyncAction(\"messages\", \"postMessage\")(ReadyButton));","map":{"version":3,"sources":["/Users/drashti/Documents/battleship-project/src/react/components/setUpBoard/ReadyButton.js"],"names":["React","connect","withAsyncAction","Redirect","fetchLastMessage","getOldMessages","startBoard","WaitScreen","boards","ReadyButton","state","redirect","opponentName","playerReady","message","componentDidMount","determineOpponentName","props","playerName","setState","verifyAllShipsPlaced","ships","battleship","carrier","cruiser","destroyer","submarine","includes","alert","postMessagesOfBattleShipLocation","postMessagesOfCarrierLocation","postMessagesOfCruiserLocation","postMessagesOfDestroyerLocation","postMessagesOfSubmarineLocation","postMessage","battleshipCoordinates","coordinates","gameNumber","forEach","coordinate","text","ship","carrierCoordinates","cruiserCoordinates","destroyerCoordinates","submarineCoordinates","startCheckingForOpponentReady","interval","setInterval","checkReadyPlay","then","result","payload","messages","map","redirectToPlayGame","handleClick","clearInterval","Component","mapStateToProps","setUpGame","placeBattleship","placeCarrier","placeCruiser","placeDestroyer","placeSubmarine","auth","login","username","welcome","startGame","slice","undefined","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect, withAsyncAction } from \"../../HOCs\";\nimport { Redirect } from \"../index\";\nimport {\n  fetchLastMessage,\n  getOldMessages,\n  startBoard\n} from \"../../../redux/index\";\nimport { WaitScreen } from \"../waitScreen\";\nimport { boards } from \".\";\n\nclass ReadyButton extends React.Component {\n  state = {\n    redirect: false,\n    opponentName: \"\",\n    playerReady: false,\n    message: \"Waiting for your opponent to finish placing ships...\"\n  };\n\n  componentDidMount = () => {\n    this.determineOpponentName();\n  };\n\n  determineOpponentName = () => {\n    if (this.props.playerName === \"playerA\") {\n      this.setState({ opponentName: \"playerB\" });\n    } else if (this.props.playerName === \"playerB\") {\n      this.setState({ opponentName: \"playerA\" });\n    }\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  verifyAllShipsPlaced = () => {\n    const ships = [\n      this.props.battleship,\n      this.props.carrier,\n      this.props.cruiser,\n      this.props.destroyer,\n      this.props.submarine\n    ];\n    if (ships.includes(null)) {\n      alert(\"Please place all your ships on the board!\");\n      return false;\n    } else {\n      this.postMessagesOfBattleShipLocation();\n      this.postMessagesOfCarrierLocation();\n      this.postMessagesOfCruiserLocation();\n      this.postMessagesOfDestroyerLocation();\n      this.postMessagesOfSubmarineLocation();\n      return true;\n    }\n  };\n  postMessagesOfBattleShipLocation = () => {\n    const postMessage = this.props.postMessage;\n    const startBoard = this.props.startBoard;\n    const battleshipCoordinates = this.props.battleship.coordinates;\n    const gameNumber = this.props.gameNumber;\n    const playerName = this.props.playerName;\n    battleshipCoordinates.forEach(function(coordinate) {\n      postMessage({\n        text: `Game ${gameNumber} battleship ${coordinate}`\n      });\n      boards[playerName][coordinate].ship = \"battleship\";\n      startBoard(boards);\n    });\n  };\n\n  postMessagesOfCarrierLocation = () => {\n    const postMessage = this.props.postMessage;\n    const carrierCoordinates = this.props.carrier.coordinates;\n    const gameNumber = this.props.gameNumber;\n    const playerName = this.props.playerName;\n    carrierCoordinates.forEach(function(coordinate) {\n      postMessage({\n        text: `Game ${gameNumber} carrier ${coordinate}`\n      });\n      boards[playerName][coordinate].ship = \"carrier\";\n      startBoard(boards);\n    });\n  };\n  postMessagesOfCruiserLocation = () => {\n    const postMessage = this.props.postMessage;\n    const cruiserCoordinates = this.props.cruiser.coordinates;\n    const gameNumber = this.props.gameNumber;\n    const playerName = this.props.playerName;\n    cruiserCoordinates.forEach(function(coordinate) {\n      postMessage({\n        text: `Game ${gameNumber} cruiser ${coordinate}`\n      });\n      boards[playerName][coordinate].ship = \"cruiser\";\n      startBoard(boards);\n    });\n  };\n  postMessagesOfDestroyerLocation = () => {\n    const postMessage = this.props.postMessage;\n    const destroyerCoordinates = this.props.destroyer.coordinates;\n    const gameNumber = this.props.gameNumber;\n    const playerName = this.props.playerName;\n    destroyerCoordinates.forEach(function(coordinate) {\n      postMessage({\n        text: `Game ${gameNumber} destroyer ${coordinate}`\n      });\n      boards[playerName][coordinate].ship = \"destroyer\";\n      startBoard(boards);\n    });\n  };\n  postMessagesOfSubmarineLocation = () => {\n    const postMessage = this.props.postMessage;\n    const submarineCoordinates = this.props.submarine.coordinates;\n    const gameNumber = this.props.gameNumber;\n    const playerName = this.props.playerName;\n    submarineCoordinates.forEach(function(coordinate) {\n      postMessage({\n        text: `Game ${gameNumber} submarine ${coordinate}`\n      });\n      boards[playerName][coordinate].ship = \"submarine\";\n      startBoard(boards);\n    });\n  };\n\n  startCheckingForOpponentReady = () => {\n    this.interval = setInterval(() => {\n      this.checkReadyPlay();\n    }, 2000);\n  };\n\n  checkReadyPlay = () => {\n    this.props.fetchLastMessage(this.state.opponentName).then(result => {\n      result.payload.messages.map(message => {\n        if (!message.text.includes(\"start\")) {\n          return this.redirectToPlayGame();\n        } else return false;\n      });\n    });\n  };\n\n  redirectToPlayGame = () => {\n    this.props.getOldMessages(this.state.opponentName);\n    this.setState({ redirect: true });\n  };\n\n  handleClick = () => {\n    if (this.verifyAllShipsPlaced() === false) {\n      return;\n    }\n    this.setState({ playerReady: true });\n    this.props.postMessage({ text: `Game ${this.props.gameNumber} ready` });\n    this.startCheckingForOpponentReady();\n  };\n\n  render() {\n    if (this.state.redirect === true) {\n      return <Redirect to=\"/play\" />;\n    }\n    return (\n      <React.Fragment>\n        {this.state.playerReady && <WaitScreen message={this.state.message} />}\n        <button onClick={this.handleClick}>Ready!</button>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    battleship: state.setUpGame.placeBattleship.result,\n    carrier: state.setUpGame.placeCarrier.result,\n    cruiser: state.setUpGame.placeCruiser.result,\n    destroyer: state.setUpGame.placeDestroyer.result,\n    submarine: state.setUpGame.placeSubmarine.result,\n    playerName: state.auth.login.result.username,\n    gameNumber: state.welcome.startGame.result\n      ? state.welcome.startGame.result.message.text.slice(5, 9)\n      : undefined\n  };\n};\nconst mapDispatchToProps = {\n  fetchLastMessage,\n  getOldMessages,\n  startBoard\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withAsyncAction(\"messages\", \"postMessage\")(ReadyButton));\n"]},"metadata":{},"sourceType":"module"}