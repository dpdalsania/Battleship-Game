{"ast":null,"code":"import _objectSpread from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { FIRETORPEDO, ADDCOORDINATES, TORPEDOHIT } from \"../actionTypes\";\nvar url = domain + \"/messages\";\nexport var addCoordinates = function addCoordinates(messageData) {\n  return function (dispatch) {\n    return dispatch({\n      type: ADDCOORDINATES.SUCCESS,\n      payload: messageData\n    });\n  };\n};\nexport var fireTorpedo = function fireTorpedo(messageBody) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: FIRETORPEDO.START\n    });\n    var token = getState().auth.login.result.token;\n    return fetch(url, {\n      method: \"POST\",\n      headers: _objectSpread({\n        Authorization: \"Bearer \" + token\n      }, jsonHeaders),\n      body: JSON.stringify(messageBody)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: FIRETORPEDO.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      if (err.statusCode === 401) {\n        return dispatch({\n          type: FIRETORPEDO.SUCCESS,\n          payload: {\n            statusCode: 200\n          }\n        });\n      }\n\n      return Promise.reject(dispatch({\n        type: FIRETORPEDO.FAIL,\n        payload: err.message\n      }));\n    });\n  };\n};\nexport var torpedoHit = function torpedoHit(messageId) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: TORPEDOHIT.START\n    });\n    var token = getState().auth.login.result.token;\n    return fetch(domain + \"/likes\", {\n      method: \"POST\",\n      headers: _objectSpread({\n        Authorization: \"Bearer \" + token\n      }, jsonHeaders),\n      body: JSON.stringify({\n        messageId: messageId\n      })\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: TORPEDOHIT.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: TORPEDOHIT.FAIL,\n        payload: err\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/drashti/Documents/battleship-project/src/redux/actionCreators/fireTorpedo.js"],"names":["domain","jsonHeaders","handleJsonResponse","FIRETORPEDO","ADDCOORDINATES","TORPEDOHIT","url","addCoordinates","messageData","dispatch","type","SUCCESS","payload","fireTorpedo","messageBody","getState","START","token","auth","login","result","fetch","method","headers","Authorization","body","JSON","stringify","then","catch","err","statusCode","Promise","reject","FAIL","message","torpedoHit","messageId"],"mappings":"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","sourcesContent":["import { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { FIRETORPEDO, ADDCOORDINATES, TORPEDOHIT } from \"../actionTypes\";\nconst url = domain + \"/messages\";\n\nexport const addCoordinates = messageData => dispatch => {\n    return dispatch({\n        type: ADDCOORDINATES.SUCCESS,\n        payload: messageData\n    });\n};\n\nexport const fireTorpedo = messageBody => (dispatch, getState) => {\n    dispatch({\n        type: FIRETORPEDO.START\n    });\n    const token = getState().auth.login.result.token;\n    return fetch(url, {\n        method: \"POST\",\n        headers: { Authorization: \"Bearer \" + token, ...jsonHeaders },\n        body: JSON.stringify(messageBody)\n    })\n        .then(handleJsonResponse)\n        .then(result => {\n            return dispatch({\n                type: FIRETORPEDO.SUCCESS,\n                payload: result\n            });\n        })\n        .catch(err => {\n            if (err.statusCode === 401) {\n                return dispatch({\n                    type: FIRETORPEDO.SUCCESS,\n                    payload: { statusCode: 200 }\n                });\n            }\n            return Promise.reject(\n                dispatch({ type: FIRETORPEDO.FAIL, payload: err.message })\n            );\n        });\n};\n\n\nexport const torpedoHit = messageId => (dispatch, getState) => {\n    dispatch({\n      type: TORPEDOHIT.START\n    });\n  \n    const token = getState().auth.login.result.token;\n  \n    return fetch(domain + \"/likes\", {\n      method: \"POST\",\n      headers: { Authorization: \"Bearer \" + token, ...jsonHeaders },\n      body: JSON.stringify({ messageId })\n    })\n      .then(handleJsonResponse)\n      .then(result => {\n        return dispatch({\n          type: TORPEDOHIT.SUCCESS,\n          payload: result\n        });\n      })\n      .catch(err => {\n        return Promise.reject(dispatch({ type: TORPEDOHIT.FAIL, payload: err }));\n      });\n  };\n"]},"metadata":{},"sourceType":"module"}