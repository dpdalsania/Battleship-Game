{"ast":null,"code":"import { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { CHECKREADYSTART } from \"../actionTypes\";\nvar url = domain + \"/messages\";\nexport var checkReadyStart = function checkReadyStart() {\n  return function (dispatch) {\n    dispatch({\n      type: CHECKREADYSTART.START //yes, it's checkreadystart.start\n\n    });\n    return fetch(url + \"?limit=2&offset=0\", {\n      method: \"GET\",\n      headers: jsonHeaders\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: CHECKREADYSTART.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: CHECKREADYSTART.FAIL,\n        payload: err\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/drashti/Documents/battleship-project/src/redux/actionCreators/waitScreen.js"],"names":["domain","jsonHeaders","handleJsonResponse","CHECKREADYSTART","url","checkReadyStart","dispatch","type","START","fetch","method","headers","then","result","SUCCESS","payload","catch","err","Promise","reject","FAIL"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,WAAjB,EAA8BC,kBAA9B,QAAwD,aAAxD;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA,IAAMC,GAAG,GAAGJ,MAAM,GAAG,WAArB;AAEA,OAAO,IAAMK,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAM,UAAAC,QAAQ,EAAI;AAC/CA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,eAAe,CAACK,KADf,CACqB;;AADrB,KAAD,CAAR;AAIA,WAAOC,KAAK,CAACL,GAAG,GAAG,mBAAP,EAA4B;AACtCM,MAAAA,MAAM,EAAE,KAD8B;AAEtCC,MAAAA,OAAO,EAAEV;AAF6B,KAA5B,CAAL,CAIJW,IAJI,CAICV,kBAJD,EAKJU,IALI,CAKC,UAAAC,MAAM,EAAI;AACd,aAAOP,QAAQ,CAAC;AACdC,QAAAA,IAAI,EAAEJ,eAAe,CAACW,OADR;AAEdC,QAAAA,OAAO,EAAEF;AAFK,OAAD,CAAf;AAID,KAVI,EAWJG,KAXI,CAWE,UAAAC,GAAG,EAAI;AACZ,aAAOC,OAAO,CAACC,MAAR,CACLb,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEJ,eAAe,CAACiB,IAAxB;AAA8BL,QAAAA,OAAO,EAAEE;AAAvC,OAAD,CADH,CAAP;AAGD,KAfI,CAAP;AAgBD,GArB8B;AAAA,CAAxB","sourcesContent":["import { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { CHECKREADYSTART } from \"../actionTypes\";\n\nconst url = domain + \"/messages\";\n\nexport const checkReadyStart = () => dispatch => {\n  dispatch({\n    type: CHECKREADYSTART.START //yes, it's checkreadystart.start\n  });\n\n  return fetch(url + \"?limit=2&offset=0\", {\n    method: \"GET\",\n    headers: jsonHeaders\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: CHECKREADYSTART.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(\n        dispatch({ type: CHECKREADYSTART.FAIL, payload: err })\n      );\n    });\n};\n"]},"metadata":{},"sourceType":"module"}