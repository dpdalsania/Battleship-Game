{"ast":null,"code":"import _classCallCheck from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/drashti/Documents/battleship-project/src/react/components/playGame/opponentBoard/OpponentBoardGrid.js\";\nimport React from \"react\";\nimport OpponentBoardSquare from \"./OpponentBoardSquare\";\nimport { connect } from \"../../../HOCs\";\n\nvar OpponentBoardGrid =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(OpponentBoardGrid, _React$Component);\n\n  function OpponentBoardGrid() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, OpponentBoardGrid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OpponentBoardGrid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      opponentName: \"\"\n    };\n    _this.label = \"\";\n    _this.newRow = [];\n    _this.newBoard = [];\n    _this.rowLabels = [\" \", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n    _this.targetRow = null;\n    _this.targetColumn = null;\n\n    _this.componentDidMount = function () {\n      _this.findOpponent();\n    };\n\n    _this.drawSquare = function (label) {\n      if (_this.props.hitAddress.includes(label)) {\n        return React.createElement(OpponentBoardSquare, {\n          value: label,\n          key: label,\n          image: \"Hit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        });\n      } else if (_this.props.missAddress.includes(label)) {\n        return React.createElement(OpponentBoardSquare, {\n          value: label,\n          key: label,\n          image: \"Miss\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(OpponentBoardSquare, {\n          value: label,\n          key: label,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        });\n      }\n    };\n\n    _this.isItAHit = function (label) {\n      if (_this.props.theBoard[_this.state.opponentName][label].ship) {\n        return true;\n      }\n\n      return;\n    };\n\n    _this.findOpponent = function () {\n      if (_this.props.playerName === \"playerA\") {\n        _this.setState({\n          opponentName: \"playerB\"\n        });\n      } else {\n        _this.setState({\n          opponentName: \"playerA\"\n        });\n      }\n    };\n\n    _this.drawRow = function (newRow, rowLabel) {\n      return React.createElement(\"div\", {\n        key: rowLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, newRow);\n    };\n\n    return _this;\n  }\n\n  _createClass(OpponentBoardGrid, [{\n    key: \"render\",\n    value: function render() {\n      this.newBoard = [];\n      this.newRow = [];\n      var newSquare = \"\";\n\n      for (var headerRowLabels = 0; headerRowLabels <= 10; headerRowLabels++) {\n        if (headerRowLabels === 0) {\n          this.label = \"X\";\n        } else {\n          this.label = headerRowLabels;\n        }\n\n        newSquare = this.drawSquare(this.label);\n        this.newRow.push(newSquare);\n      }\n\n      this.newBoard.push(this.drawRow(this.newRow, \"header\"));\n\n      for (var row = 1; row <= 10; row++) {\n        this.newRow = [];\n\n        for (var column = 0; column <= 10; column++) {\n          if (column === 0) {\n            this.label = this.rowLabels[row];\n          } else {\n            this.label = this.rowLabels[row] + column.toString();\n          }\n\n          newSquare = this.drawSquare(this.label);\n          this.newRow.push(newSquare);\n        }\n\n        this.newBoard.push(this.drawRow(this.newRow, row));\n      }\n\n      this.newBoard.className = \"newBoard\";\n      return this.newBoard;\n    }\n  }]);\n\n  return OpponentBoardGrid;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    torpedoMessage: state.play.addCoordinates.result ? state.play.addCoordinates.result : null,\n    playerName: state.auth.login.result.username,\n    theBoard: state.manipulateBoards.startBoard.result\n  };\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(OpponentBoardGrid);","map":{"version":3,"sources":["/Users/drashti/Documents/battleship-project/src/react/components/playGame/opponentBoard/OpponentBoardGrid.js"],"names":["React","OpponentBoardSquare","connect","OpponentBoardGrid","state","opponentName","label","newRow","newBoard","rowLabels","targetRow","targetColumn","componentDidMount","findOpponent","drawSquare","props","hitAddress","includes","missAddress","isItAHit","theBoard","ship","playerName","setState","drawRow","rowLabel","newSquare","headerRowLabels","push","row","column","toString","className","Component","mapStateToProps","torpedoMessage","play","addCoordinates","result","auth","login","username","manipulateBoards","startBoard","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport OpponentBoardSquare from \"./OpponentBoardSquare\";\nimport { connect } from \"../../../HOCs\";\n\nclass OpponentBoardGrid extends React.Component {\n  state = {\n    opponentName: \"\"\n  };\n  label = \"\";\n  newRow = [];\n  newBoard = [];\n  rowLabels = [\" \", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n  targetRow = null;\n  targetColumn = null;\n\n  componentDidMount = () => {\n    this.findOpponent();\n  };\n\n  drawSquare = label => {\n    if (this.props.hitAddress.includes(label)) {\n      return <OpponentBoardSquare value={label} key={label} image=\"Hit\" />;\n    } else if (this.props.missAddress.includes(label)) {\n      return <OpponentBoardSquare value={label} key={label} image=\"Miss\" />;\n    } else {\n      return <OpponentBoardSquare value={label} key={label} />;\n    }\n  };\n\n  isItAHit = label => {\n    if (this.props.theBoard[this.state.opponentName][label].ship) {\n      return true;\n    }\n    return;\n  };\n\n  findOpponent = () => {\n    if (this.props.playerName === \"playerA\") {\n      this.setState({ opponentName: \"playerB\" });\n    } else {\n      this.setState({ opponentName: \"playerA\" });\n    }\n  };\n\n  drawRow = (newRow, rowLabel) => {\n    return <div key={rowLabel}>{newRow}</div>;\n  };\n\n  render() {\n    this.newBoard = [];\n    this.newRow = [];\n    let newSquare = \"\";\n\n    for (let headerRowLabels = 0; headerRowLabels <= 10; headerRowLabels++) {\n      if (headerRowLabels === 0) {\n        this.label = \"X\";\n      } else {\n        this.label = headerRowLabels;\n      }\n      newSquare = this.drawSquare(this.label);\n      this.newRow.push(newSquare);\n    }\n\n    this.newBoard.push(this.drawRow(this.newRow, \"header\"));\n\n    for (let row = 1; row <= 10; row++) {\n      this.newRow = [];\n      for (let column = 0; column <= 10; column++) {\n        if (column === 0) {\n          this.label = this.rowLabels[row];\n        } else {\n          this.label = this.rowLabels[row] + column.toString();\n        }\n\n        newSquare = this.drawSquare(this.label);\n        this.newRow.push(newSquare);\n      }\n      this.newBoard.push(this.drawRow(this.newRow, row));\n    }\n    this.newBoard.className = \"newBoard\";\n\n    return this.newBoard;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    torpedoMessage: state.play.addCoordinates.result\n      ? state.play.addCoordinates.result\n      : null,\n    playerName: state.auth.login.result.username,\n    theBoard: state.manipulateBoards.startBoard.result\n  };\n};\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OpponentBoardGrid);\n"]},"metadata":{},"sourceType":"module"}