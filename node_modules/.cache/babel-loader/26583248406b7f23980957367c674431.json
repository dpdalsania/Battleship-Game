{"ast":null,"code":"import _classCallCheck from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/drashti/Documents/battleship-project/src/react/components/playGame/playerBoard/PlayerBoardGrid.js\";\nimport React from \"react\";\nimport PlayerBoardSquare from \"./PlayerBoardSquare\";\nimport { connect } from \"../../../HOCs\";\n\nvar PlayerBoardGrid =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PlayerBoardGrid, _React$Component);\n\n  function PlayerBoardGrid() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PlayerBoardGrid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PlayerBoardGrid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.label = \"\";\n    _this.newRow = [];\n    _this.newBoard = [];\n    _this.rowLabels = [\" \", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n    _this.targetRow = null;\n    _this.targetColumn = null;\n\n    _this.drawSquare = function (label, isShip) {\n      return React.createElement(PlayerBoardSquare, {\n        value: label,\n        isShip: isShip,\n        key: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      });\n    };\n\n    _this.drawRow = function (newRow, rowLabel) {\n      return React.createElement(\"div\", {\n        key: rowLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, newRow);\n    };\n\n    _this.doesAShipResideHereAndIfSoWhichOne = function (coordinates) {\n      if (_this.props.battleshipPosition !== null) {\n        if (_this.props.battleshipPosition.coordinates.includes(coordinates)) {\n          return true;\n        }\n      }\n\n      if (_this.props.carrierPosition !== null) {\n        _this.carrierLocation = [];\n\n        if (_this.props.carrierPosition.coordinates.includes(coordinates)) {\n          return true;\n        }\n      }\n\n      if (_this.props.cruiserPosition !== null) {\n        if (_this.props.cruiserPosition.coordinates.includes(coordinates)) {\n          return true;\n        }\n      }\n\n      if (_this.props.carrierPosition !== null) {\n        if (_this.props.carrierPosition.coordinates.includes(coordinates)) {\n          return true;\n        }\n      }\n\n      if (_this.props.destroyerPosition !== null) {\n        if (_this.props.destroyerPosition.coordinates.includes(coordinates)) {\n          return true;\n        }\n      }\n\n      if (_this.props.submarinePosition !== null) {\n        if (_this.props.submarinePosition.coordinates.includes(coordinates)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    return _this;\n  }\n\n  _createClass(PlayerBoardGrid, [{\n    key: \"render\",\n    value: function render() {\n      this.newBoard = [];\n      this.newRow = [];\n\n      for (var headerRowLabels = 0; headerRowLabels <= 10; headerRowLabels++) {\n        if (headerRowLabels === 0) {\n          this.label = \"X\";\n        } else {\n          this.label = headerRowLabels;\n        }\n\n        var newSquare = this.drawSquare(this.label);\n        this.newRow.push(newSquare);\n      }\n\n      this.newBoard.push(this.drawRow(this.newRow, \"header\"));\n\n      for (var row = 1; row <= 10; row++) {\n        this.newRow = [];\n\n        for (var column = 0; column <= 10; column++) {\n          if (column === 0) {\n            this.label = this.rowLabels[row];\n          } else {\n            this.label = this.rowLabels[row] + column.toString();\n          }\n\n          var _newSquare = \"\";\n\n          if (!this.doesAShipResideHereAndIfSoWhichOne(this.label)) {\n            _newSquare = this.drawSquare(this.label, false);\n          }\n\n          if (this.doesAShipResideHereAndIfSoWhichOne(this.label)) {\n            _newSquare = this.drawSquare(this.label, true);\n          }\n\n          this.newRow.push(_newSquare);\n        }\n\n        this.newBoard.push(this.drawRow(this.newRow, row));\n      }\n\n      this.newBoard.className = \"newBoard\";\n      return this.newBoard;\n    }\n  }]);\n\n  return PlayerBoardGrid;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    battleshipPosition: state.setUpGame.placeBattleship.result,\n    carrierPosition: state.setUpGame.placeCarrier.result,\n    cruiserPosition: state.setUpGame.placeCruiser.result,\n    destroyerPosition: state.setUpGame.placeDestroyer.result,\n    submarinePosition: state.setUpGame.placeSubmarine.result\n  };\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerBoardGrid);","map":{"version":3,"sources":["/Users/drashti/Documents/battleship-project/src/react/components/playGame/playerBoard/PlayerBoardGrid.js"],"names":["React","PlayerBoardSquare","connect","PlayerBoardGrid","label","newRow","newBoard","rowLabels","targetRow","targetColumn","drawSquare","isShip","drawRow","rowLabel","doesAShipResideHereAndIfSoWhichOne","coordinates","props","battleshipPosition","includes","carrierPosition","carrierLocation","cruiserPosition","destroyerPosition","submarinePosition","headerRowLabels","newSquare","push","row","column","toString","className","Component","mapStateToProps","state","setUpGame","placeBattleship","result","placeCarrier","placeCruiser","placeDestroyer","placeSubmarine","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PlayerBoardSquare from \"./PlayerBoardSquare\";\nimport { connect } from \"../../../HOCs\";\n\nclass PlayerBoardGrid extends React.Component {\n  label = \"\";\n  newRow = [];\n  newBoard = [];\n  rowLabels = [\" \", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n  targetRow = null;\n  targetColumn = null;\n\n  drawSquare = (label, isShip) => {\n    return <PlayerBoardSquare value={label} isShip={isShip} key={label} />;\n  };\n\n  drawRow = (newRow, rowLabel) => {\n    return <div key={rowLabel}>{newRow}</div>;\n  };\n\n  doesAShipResideHereAndIfSoWhichOne = coordinates => {\n    if (this.props.battleshipPosition !== null) {\n      if (this.props.battleshipPosition.coordinates.includes(coordinates)) {\n        return true;\n      }\n    }\n\n    if (this.props.carrierPosition !== null) {\n      this.carrierLocation = [];\n      if (this.props.carrierPosition.coordinates.includes(coordinates)) {\n        return true;\n      }\n    }\n\n    if (this.props.cruiserPosition !== null) {\n      if (this.props.cruiserPosition.coordinates.includes(coordinates)) {\n        return true;\n      }\n    }\n\n    if (this.props.carrierPosition !== null) {\n      if (this.props.carrierPosition.coordinates.includes(coordinates)) {\n        return true;\n      }\n    }\n\n    if (this.props.destroyerPosition !== null) {\n      if (this.props.destroyerPosition.coordinates.includes(coordinates)) {\n        return true;\n      }\n    }\n\n    if (this.props.submarinePosition !== null) {\n      if (this.props.submarinePosition.coordinates.includes(coordinates)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  render() {\n    this.newBoard = [];\n    this.newRow = [];\n\n    for (let headerRowLabels = 0; headerRowLabels <= 10; headerRowLabels++) {\n      if (headerRowLabels === 0) {\n        this.label = \"X\";\n      } else {\n        this.label = headerRowLabels;\n      }\n      let newSquare = this.drawSquare(this.label);\n      this.newRow.push(newSquare);\n    }\n\n    this.newBoard.push(this.drawRow(this.newRow, \"header\"));\n\n    for (let row = 1; row <= 10; row++) {\n      this.newRow = [];\n      for (let column = 0; column <= 10; column++) {\n        if (column === 0) {\n          this.label = this.rowLabels[row];\n        } else {\n          this.label = this.rowLabels[row] + column.toString();\n        }\n        let newSquare = \"\";\n        if (!this.doesAShipResideHereAndIfSoWhichOne(this.label)) {\n          newSquare = this.drawSquare(this.label, false);\n        }\n        if (this.doesAShipResideHereAndIfSoWhichOne(this.label)) {\n          newSquare = this.drawSquare(this.label, true);\n        }\n        this.newRow.push(newSquare);\n      }\n      this.newBoard.push(this.drawRow(this.newRow, row));\n    }\n    this.newBoard.className = \"newBoard\";\n\n    return this.newBoard;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    battleshipPosition: state.setUpGame.placeBattleship.result,\n    carrierPosition: state.setUpGame.placeCarrier.result,\n    cruiserPosition: state.setUpGame.placeCruiser.result,\n    destroyerPosition: state.setUpGame.placeDestroyer.result,\n    submarinePosition: state.setUpGame.placeSubmarine.result\n  };\n};\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerBoardGrid);\n"]},"metadata":{},"sourceType":"module"}