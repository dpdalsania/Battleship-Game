{"ast":null,"code":"import _objectSpread from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { STARTGAME } from \"../actionTypes\";\nvar url = domain + \"/messages\";\nexport var startGame = function startGame(gameNumber) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: STARTGAME.START\n    });\n    var token = getState().auth.login.result.token;\n    return fetch(url, {\n      method: \"POST\",\n      headers: _objectSpread({}, jsonHeaders, {\n        Authorization: \"Bearer \" + token\n      }),\n      body: JSON.stringify({\n        text: \"Game \" + gameNumber + \" start\"\n      })\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: STARTGAME.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: STARTGAME.FAIL,\n        payload: err\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/drashti/Documents/battleship-project/src/redux/actionCreators/welcome.js"],"names":["domain","jsonHeaders","handleJsonResponse","STARTGAME","url","startGame","gameNumber","dispatch","getState","type","START","token","auth","login","result","fetch","method","headers","Authorization","body","JSON","stringify","text","then","SUCCESS","payload","catch","err","Promise","reject","FAIL"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,WAAjB,EAA8BC,kBAA9B,QAAwD,aAAxD;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,IAAMC,GAAG,GAAGJ,MAAM,GAAG,WAArB;AAEA,OAAO,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAAAC,UAAU;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7DD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEN,SAAS,CAACO;AADT,KAAD,CAAR;AAGA,QAAMC,KAAK,GAAGH,QAAQ,GAAGI,IAAX,CAAgBC,KAAhB,CAAsBC,MAAtB,CAA6BH,KAA3C;AAEA,WAAOI,KAAK,CAACX,GAAD,EAAM;AAChBY,MAAAA,MAAM,EAAE,MADQ;AAEhBC,MAAAA,OAAO,oBAAOhB,WAAP;AAAoBiB,QAAAA,aAAa,EAAE,YAAYP;AAA/C,QAFS;AAGhBQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,IAAI,EAAE,UAAUhB,UAAV,GAAuB;AAA/B,OAAf;AAHU,KAAN,CAAL,CAKJiB,IALI,CAKCrB,kBALD,EAMJqB,IANI,CAMC,UAAAT,MAAM,EAAI;AACd,aAAOP,QAAQ,CAAC;AACdE,QAAAA,IAAI,EAAEN,SAAS,CAACqB,OADF;AAEdC,QAAAA,OAAO,EAAEX;AAFK,OAAD,CAAf;AAID,KAXI,EAYJY,KAZI,CAYE,UAAAC,GAAG,EAAI;AACZ,aAAOC,OAAO,CAACC,MAAR,CAAetB,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEN,SAAS,CAAC2B,IAAlB;AAAwBL,QAAAA,OAAO,EAAEE;AAAjC,OAAD,CAAvB,CAAP;AACD,KAdI,CAAP;AAeD,GArBkC;AAAA,CAA5B","sourcesContent":["import { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { STARTGAME } from \"../actionTypes\";\n\nconst url = domain + \"/messages\";\n\nexport const startGame = gameNumber => (dispatch, getState) => {\n  dispatch({\n    type: STARTGAME.START\n  });\n  const token = getState().auth.login.result.token;\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: { ...jsonHeaders, Authorization: \"Bearer \" + token },\n    body: JSON.stringify({ text: \"Game \" + gameNumber + \" start\" })\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: STARTGAME.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(dispatch({ type: STARTGAME.FAIL, payload: err }));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}