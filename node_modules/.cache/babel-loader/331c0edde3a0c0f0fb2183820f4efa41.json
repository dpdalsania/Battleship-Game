{"ast":null,"code":"import _classCallCheck from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/drashti/Documents/battleship-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/drashti/Documents/battleship-project/src/react/components/playGame/opponentBoard/OpponentBoard.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { OpponentBoardGrid } from \".\";\nimport { checkForLose } from \"../checkForLose\";\nimport { WaitScreen } from \"../../waitScreen\";\nimport { addCoordinates, fetchLastMessage, startBoard } from \"../../../../redux/index\";\nimport { FireButton } from \"../index\";\n\nvar OpponentBoard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(OpponentBoard, _React$Component);\n\n  function OpponentBoard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, OpponentBoard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OpponentBoard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      opponentTurn: false,\n      waitMessage: \"Waiting for your opponent to take a turn...\",\n      winMessage: \"Congratulations!  You won!  Your opponent has surrendered.\",\n      TargetCell: \"\",\n      opponentName: \"\",\n      playerHasWon: false,\n      hitAddress: [],\n      missAddress: [],\n      didOpponentWin: false,\n      didOpponentAcknowledgeWin: false,\n      didOpponentSinkBattleship: false,\n      didOpponentSinkCarrier: false,\n      didOpponentSinkCruiser: false,\n      didOpponentSinkSubmarine: false,\n      didOpponentSinkDestroyer: false\n    };\n\n    _this.componentDidMount = function () {\n      _this.determineOpponentName();\n\n      _this.determineFirstMove();\n\n      setInterval(_this.checkOpponentTurn, 5000);\n    };\n\n    _this.determineOpponentName = function () {\n      if (_this.props.playerName === \"playerA\") {\n        _this.setState({\n          opponentName: \"playerB\"\n        });\n      } else {\n        _this.setState({\n          opponentName: \"playerA\"\n        });\n      }\n    };\n\n    _this.determineFirstMove = function () {\n      if (_this.props.playerName === \"playerB\") {\n        _this.setState({\n          opponentTurn: true\n        });\n\n        _this.startWaitingForOpponent();\n      }\n    };\n\n    _this.componentWillUnmount = function () {\n      clearInterval();\n    };\n\n    _this.startWaitingForOpponent = function () {};\n\n    _this.checkOpponentTurn = function () {\n      if (_this.state.opponentTurn === false) {\n        return;\n      }\n\n      _this.props.fetchLastMessage(_this.state.opponentName).then(function (result) {\n        var opponentTorpedoCoordinates = result.payload.messages[0].text.split(\" \").slice(-1);\n        var messageGameNumber = result.payload.messages[0].text.split(\" \").slice(1, 2);\n\n        if (messageGameNumber && _this.props.gameNumber) {\n          if (messageGameNumber.toString() === _this.props.gameNumber.toString()) {\n            if (result.payload.messages[0].text.includes(\"surrender\")) {\n              _this.setState({\n                playerHasWon: true\n              });\n            }\n\n            if (result.payload.messages[0].text.includes(\"torpedo\")) {\n              var torpedoStatus = _this.props.board[_this.props.playerName][opponentTorpedoCoordinates].torpedo;\n\n              if (torpedoStatus === false) {\n                _this.props.board[_this.props.playerName][opponentTorpedoCoordinates].torpedo = true;\n\n                _this.props.startBoard(_this.props.board);\n\n                _this.checkForPlayerLoss(_this.props.board);\n\n                _this.toggleTurn();\n              }\n            }\n          }\n        }\n      });\n    };\n\n    _this.toggleTurn = function () {\n      if (_this.state.opponentTurn === true) {\n        _this.setState({\n          opponentTurn: false\n        });\n      } else {\n        _this.setState({\n          opponentTurn: true\n        });\n      }\n    };\n\n    _this.clickHandler = function (event) {\n      if (_this.checkThatNoTorpedoHasBeenFiredHere(event.target.innerHTML)) {\n        _this.setState({\n          TargetCell: event.target.innerHTML\n        });\n\n        _this.props.addCoordinates(event.target.innerHTML);\n\n        _this.startWaitingForOpponent();\n      }\n    };\n\n    _this.checkThatNoTorpedoHasBeenFiredHere = function (gridSquare) {\n      if (_this.props.board[_this.state.opponentName][gridSquare].torpedo === false) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.handleFireButtonClick = function () {\n      if (_this.state.TargetCell) {\n        console.log(\"we have a target cell \" + _this.state.TargetCell);\n\n        _this.checkStateForHitMarkers(_this.props.TargetCell);\n\n        _this.setState({\n          opponentTurn: true,\n          TargetCell: \"\"\n        });\n      } else {\n        alert(\"Please select a torpedo destination before hitting 'Fire' \");\n      }\n    };\n\n    _this.returnDecision = function (msg, cellToCheck) {\n      if (msg === \"Hit\") {\n        _this.setState({\n          hitAddress: _this.state.hitAddress.concat(cellToCheck)\n        });\n      } else {\n        _this.setState({\n          missAddress: _this.state.missAddress.concat(cellToCheck)\n        });\n      }\n    };\n\n    _this.checkForPlayerLoss = function (boards) {\n      if (checkForLose(boards[_this.props.playerName]) === true) {\n        _this.setState({\n          didPlayerLose: true\n        });\n      } else {\n        if (!_this.state.didOpponentSinkBattleship) {\n          if (checkForLose(boards[_this.props.playerName]).includes(\"battleship\")) {\n            _this.setState({\n              didOpponentSinkBattleship: true\n            });\n\n            alert(\"Your opponent sank your battleship!\");\n          }\n        }\n\n        if (!_this.state.didOpponentSinkCarrier) {\n          if (checkForLose(boards[_this.props.playerName]).includes(\"carrier\")) {\n            _this.setState({\n              didOpponentSinkCarrier: true\n            });\n\n            alert(\"Your opponent sank your carrier!\");\n          }\n        }\n\n        if (!_this.state.didOpponentSinkCruiser) {\n          if (checkForLose(boards[_this.props.playerName]).includes(\"cruiser\")) {\n            _this.setState({\n              didOpponentSinkCruiser: true\n            });\n\n            alert(\"Your opponent sank your cruiser!\");\n          }\n        }\n\n        if (!_this.state.didOpponentSinkSubmarine) {\n          if (checkForLose(boards[_this.props.playerName]).includes(\"submarine\")) {\n            _this.setState({\n              didOpponentSinkSubmarine: true\n            });\n\n            alert(\"Your opponent sank your submarine!\");\n          }\n        }\n\n        if (!_this.state.didOpponentSinkDestroyer) {\n          if (checkForLose(boards[_this.props.playerName]).includes(\"destroyer\")) {\n            _this.setState({\n              didOpponentSinkDestroyer: true\n            });\n\n            alert(\"Your opponent sank your destroyer!\");\n          }\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(OpponentBoard, [{\n    key: \"checkStateForHitMarkers\",\n    value: function checkStateForHitMarkers(cellToCheck) {\n      if (this.props.board[this.state.opponentName][cellToCheck].ship === null) {\n        alert(\"Miss\");\n        this.returnDecision(\"Miss\", cellToCheck);\n      } else {\n        alert(\"HIT!\");\n        this.returnDecision(\"Hit\", cellToCheck);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.didPlayerLose) {\n        return React.createElement(WaitScreen, {\n          message: \"Your opponent destroyed your fleet! You lose!\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }, \"true\");\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, this.state.opponentTurn && React.createElement(WaitScreen, {\n        message: this.state.waitMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }), this.state.playerHasWon && React.createElement(WaitScreen, {\n        message: this.state.winMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"opponentBoard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \"Opponent Board\"), React.createElement(\"div\", {\n        className: \"newBoard\",\n        onClick: this.clickHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(OpponentBoardGrid, {\n        hitAddress: this.state.hitAddress,\n        missAddress: this.state.missAddress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        onClick: this.handleFireButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(FireButton, {\n        returnDecision: this.returnDecision,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return OpponentBoard;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  if (state.auth.login.result) {\n    return {\n      playerName: state.auth.login.result.username,\n      token: state.auth.login.result.token,\n      torpedoMessage: state.play.fireTorpedo.result ? state.play.fireTorpedo.result.message : null,\n      TargetCell: state.play.addCoordinates.result ? state.play.addCoordinates.result : null,\n      board: state.manipulateBoards.startBoard.result,\n      gameNumber: state.welcome.startGame.result ? state.welcome.startGame.result.message.text.slice(5, 9) : undefined\n    };\n  } else return {};\n};\n\nvar mapDispatchToProps = {\n  addCoordinates: addCoordinates,\n  fetchLastMessage: fetchLastMessage,\n  startBoard: startBoard\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(OpponentBoard);","map":{"version":3,"sources":["/Users/drashti/Documents/battleship-project/src/react/components/playGame/opponentBoard/OpponentBoard.js"],"names":["React","connect","OpponentBoardGrid","checkForLose","WaitScreen","addCoordinates","fetchLastMessage","startBoard","FireButton","OpponentBoard","state","opponentTurn","waitMessage","winMessage","TargetCell","opponentName","playerHasWon","hitAddress","missAddress","didOpponentWin","didOpponentAcknowledgeWin","didOpponentSinkBattleship","didOpponentSinkCarrier","didOpponentSinkCruiser","didOpponentSinkSubmarine","didOpponentSinkDestroyer","componentDidMount","determineOpponentName","determineFirstMove","setInterval","checkOpponentTurn","props","playerName","setState","startWaitingForOpponent","componentWillUnmount","clearInterval","then","result","opponentTorpedoCoordinates","payload","messages","text","split","slice","messageGameNumber","gameNumber","toString","includes","torpedoStatus","board","torpedo","checkForPlayerLoss","toggleTurn","clickHandler","event","checkThatNoTorpedoHasBeenFiredHere","target","innerHTML","gridSquare","handleFireButtonClick","console","log","checkStateForHitMarkers","alert","returnDecision","msg","cellToCheck","concat","boards","didPlayerLose","ship","Component","mapStateToProps","auth","login","username","token","torpedoMessage","play","fireTorpedo","message","manipulateBoards","welcome","startGame","undefined","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { OpponentBoardGrid } from \".\";\nimport { checkForLose } from \"../checkForLose\";\nimport { WaitScreen } from \"../../waitScreen\";\nimport {\n  addCoordinates,\n  fetchLastMessage,\n  startBoard\n} from \"../../../../redux/index\";\nimport { FireButton } from \"../index\";\n\nclass OpponentBoard extends React.Component {\n  state = {\n    opponentTurn: false,\n    waitMessage: \"Waiting for your opponent to take a turn...\",\n    winMessage: \"Congratulations!  You won!  Your opponent has surrendered.\",\n    TargetCell: \"\",\n    opponentName: \"\",\n    playerHasWon: false,\n    hitAddress: [],\n    missAddress: [],\n    didOpponentWin: false,\n    didOpponentAcknowledgeWin: false,\n    didOpponentSinkBattleship: false,\n    didOpponentSinkCarrier: false,\n    didOpponentSinkCruiser: false,\n    didOpponentSinkSubmarine: false,\n    didOpponentSinkDestroyer: false\n  };\n\n  componentDidMount = () => {\n    this.determineOpponentName();\n    this.determineFirstMove();\n    setInterval(this.checkOpponentTurn, 5000);\n  };\n\n  determineOpponentName = () => {\n    if (this.props.playerName === \"playerA\") {\n      this.setState({ opponentName: \"playerB\" });\n    } else {\n      this.setState({ opponentName: \"playerA\" });\n    }\n  };\n\n  determineFirstMove = () => {\n    if (this.props.playerName === \"playerB\") {\n      this.setState({ opponentTurn: true });\n      this.startWaitingForOpponent();\n    }\n  };\n\n  componentWillUnmount = () => {\n    clearInterval();\n  };\n\n  startWaitingForOpponent = () => {};\n\n  checkOpponentTurn = () => {\n    if (this.state.opponentTurn === false) {\n      return;\n    }\n    this.props.fetchLastMessage(this.state.opponentName).then(result => {\n      let opponentTorpedoCoordinates = result.payload.messages[0].text\n        .split(\" \")\n        .slice(-1);\n      let messageGameNumber = result.payload.messages[0].text\n        .split(\" \")\n        .slice(1, 2);\n      if (messageGameNumber && this.props.gameNumber) {\n        if (messageGameNumber.toString() === this.props.gameNumber.toString()) {\n          if (result.payload.messages[0].text.includes(\"surrender\")) {\n            this.setState({ playerHasWon: true });\n          }\n          if (result.payload.messages[0].text.includes(\"torpedo\")) {\n            let torpedoStatus = this.props.board[this.props.playerName][\n              opponentTorpedoCoordinates\n            ].torpedo;\n            if (torpedoStatus === false) {\n              this.props.board[this.props.playerName][\n                opponentTorpedoCoordinates\n              ].torpedo = true;\n              this.props.startBoard(this.props.board);\n              this.checkForPlayerLoss(this.props.board);\n\n              this.toggleTurn();\n            }\n          }\n        }\n      }\n    });\n  };\n\n  toggleTurn = () => {\n    if (this.state.opponentTurn === true) {\n      this.setState({ opponentTurn: false });\n    } else {\n      this.setState({ opponentTurn: true });\n    }\n  };\n\n  clickHandler = event => {\n    if (this.checkThatNoTorpedoHasBeenFiredHere(event.target.innerHTML)) {\n      this.setState({ TargetCell: event.target.innerHTML });\n      this.props.addCoordinates(event.target.innerHTML);\n      this.startWaitingForOpponent();\n    }\n  };\n\n  checkThatNoTorpedoHasBeenFiredHere = gridSquare => {\n    if (\n      this.props.board[this.state.opponentName][gridSquare].torpedo === false\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  handleFireButtonClick = () => {\n    if (this.state.TargetCell) {\n      console.log(\"we have a target cell \" + this.state.TargetCell);\n      this.checkStateForHitMarkers(this.props.TargetCell);\n      this.setState({ opponentTurn: true, TargetCell: \"\" });\n    } else {\n      alert(\"Please select a torpedo destination before hitting 'Fire' \");\n    }\n  };\n\n  checkStateForHitMarkers(cellToCheck) {\n    if (this.props.board[this.state.opponentName][cellToCheck].ship === null) {\n      alert(\"Miss\");\n      this.returnDecision(\"Miss\", cellToCheck);\n    } else {\n      alert(\"HIT!\");\n      this.returnDecision(\"Hit\", cellToCheck);\n    }\n  }\n\n  returnDecision = (msg, cellToCheck) => {\n    if (msg === \"Hit\") {\n      this.setState({\n        hitAddress: this.state.hitAddress.concat(cellToCheck)\n      });\n    } else {\n      this.setState({\n        missAddress: this.state.missAddress.concat(cellToCheck)\n      });\n    }\n  };\n\n  checkForPlayerLoss = boards => {\n    if (checkForLose(boards[this.props.playerName]) === true) {\n      this.setState({ didPlayerLose: true });\n    } else {\n      if (!this.state.didOpponentSinkBattleship) {\n        if (\n          checkForLose(boards[this.props.playerName]).includes(\"battleship\")\n        ) {\n          this.setState({ didOpponentSinkBattleship: true });\n          alert(\"Your opponent sank your battleship!\");\n        }\n      }\n      if (!this.state.didOpponentSinkCarrier) {\n        if (checkForLose(boards[this.props.playerName]).includes(\"carrier\")) {\n          this.setState({ didOpponentSinkCarrier: true });\n          alert(\"Your opponent sank your carrier!\");\n        }\n      }\n      if (!this.state.didOpponentSinkCruiser) {\n        if (checkForLose(boards[this.props.playerName]).includes(\"cruiser\")) {\n          this.setState({ didOpponentSinkCruiser: true });\n          alert(\"Your opponent sank your cruiser!\");\n        }\n      }\n      if (!this.state.didOpponentSinkSubmarine) {\n        if (checkForLose(boards[this.props.playerName]).includes(\"submarine\")) {\n          this.setState({ didOpponentSinkSubmarine: true });\n          alert(\"Your opponent sank your submarine!\");\n        }\n      }\n      if (!this.state.didOpponentSinkDestroyer) {\n        if (checkForLose(boards[this.props.playerName]).includes(\"destroyer\")) {\n          this.setState({ didOpponentSinkDestroyer: true });\n          alert(\"Your opponent sank your destroyer!\");\n        }\n      }\n    }\n  };\n\n  render() {\n    if (this.state.didPlayerLose) {\n      return (\n        <WaitScreen message=\"Your opponent destroyed your fleet! You lose!\">\n          true\n        </WaitScreen>\n      );\n    }\n    return (\n      <React.Fragment>\n        {this.state.opponentTurn && (\n          <WaitScreen message={this.state.waitMessage} />\n        )}\n        {this.state.playerHasWon && (\n          <WaitScreen message={this.state.winMessage} />\n        )}\n        <div className={\"opponentBoard\"}>\n          <h3>Opponent Board</h3>\n          <div className=\"newBoard\" onClick={this.clickHandler}>\n            <OpponentBoardGrid\n              hitAddress={this.state.hitAddress}\n              missAddress={this.state.missAddress}\n            />\n          </div>\n          <div onClick={this.handleFireButtonClick}>\n            <FireButton returnDecision={this.returnDecision} />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  if (state.auth.login.result) {\n    return {\n      playerName: state.auth.login.result.username,\n      token: state.auth.login.result.token,\n\n      torpedoMessage: state.play.fireTorpedo.result\n        ? state.play.fireTorpedo.result.message\n        : null,\n\n      TargetCell: state.play.addCoordinates.result\n        ? state.play.addCoordinates.result\n        : null,\n\n      board: state.manipulateBoards.startBoard.result,\n\n      gameNumber: state.welcome.startGame.result\n        ? state.welcome.startGame.result.message.text.slice(5, 9)\n        : undefined\n    };\n  } else return {};\n};\n\nconst mapDispatchToProps = { addCoordinates, fetchLastMessage, startBoard };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OpponentBoard);\n"]},"metadata":{},"sourceType":"module"}